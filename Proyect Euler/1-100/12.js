/**
 * 
 * Problem 12: Highly divisible triangular number
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:

1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over n divisors?
 * 
 */

function divisibleTriangleNumber(n) {

    let sum = 0;
    let numberOfDivisors = 0;
    let i = 1;

    while(numberOfDivisors < n){
        sum += i
        i++
        numberOfDivisors = countDivisors(sum);
        //console.log(sum, numberOfDivisors);
    }

    return sum;
}

function countDivisors(number){
    let counter = 0;

    for(let i = 1; i <= Math.sqrt(number); i++){
        if(number % i === 0){
            counter += 2; // Cuando calculamos los divisores de un número, estos siempre vienen en pares. Por ejemplo, si un número n es divisible por i, entonces también es divisible por n / i. Esto significa que cada vez que encontramos un divisor i, podemos contar automáticamente su "par" correspondiente, que es n / i.
        }
    }
    if(Math.sqrt(number) * Math.sqrt(number) === number){
        counter--; // Si el número es un cuadrado perfecto, hemos contado un divisor dos veces (la raíz cuadrada). Por ejemplo, para 36, la raíz cuadrada es 6, y hemos contado 6 como divisor tanto en la iteración i=6 como en la iteración i=6 (n/6). Por lo tanto, restamos 1 del contador final.
    }

    return counter;
}

console.log(divisibleTriangleNumber(5)); //28
console.log(divisibleTriangleNumber(23)); //630
console.log(divisibleTriangleNumber(167)); //1385280
console.log(divisibleTriangleNumber(374)); //17907120
console.log(divisibleTriangleNumber(500)); //76576500